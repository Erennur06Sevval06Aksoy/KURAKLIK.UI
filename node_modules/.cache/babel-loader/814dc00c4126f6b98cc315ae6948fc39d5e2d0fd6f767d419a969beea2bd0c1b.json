{"ast":null,"code":"import { LeafletContext, createLeafletContext } from '@react-leaflet/core';\nimport { Map as LeafletMap } from 'leaflet';\nimport React, { forwardRef, useCallback, useEffect, useImperativeHandle, useRef, useState } from 'react';\nfunction MapContainerComponent({\n  bounds,\n  boundsOptions,\n  center,\n  children,\n  className,\n  id,\n  placeholder,\n  style,\n  whenReady,\n  zoom,\n  ...options\n}, forwardedRef) {\n  const [props] = useState({\n    className,\n    id,\n    style\n  });\n  const [context, setContext] = useState(null);\n  const mapInstanceRef = useRef(undefined);\n  useImperativeHandle(forwardedRef, () => context?.map ?? null, [context]);\n  // biome-ignore lint/correctness/useExhaustiveDependencies: ref callback\n  const mapRef = useCallback(node => {\n    if (node !== null && !mapInstanceRef.current) {\n      const map = new LeafletMap(node, options);\n      mapInstanceRef.current = map;\n      if (center != null && zoom != null) {\n        map.setView(center, zoom);\n      } else if (bounds != null) {\n        map.fitBounds(bounds, boundsOptions);\n      }\n      if (whenReady != null) {\n        map.whenReady(whenReady);\n      }\n      setContext(createLeafletContext(map));\n    }\n  }, []);\n  useEffect(() => {\n    return () => {\n      context?.map.remove();\n    };\n  }, [context]);\n  const contents = context ? /*#__PURE__*/React.createElement(LeafletContext, {\n    value: context\n  }, children) : placeholder ?? null;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    ...props,\n    ref: mapRef\n  }, contents);\n}\nexport const MapContainer = /*#__PURE__*/forwardRef(MapContainerComponent);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}