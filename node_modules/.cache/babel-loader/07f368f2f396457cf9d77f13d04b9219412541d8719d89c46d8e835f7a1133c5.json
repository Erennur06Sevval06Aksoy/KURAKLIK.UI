{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mcTek\\\\Desktop\\\\OrmanBakanligiProje\\\\KURAKLIK\\\\KURAKLIK.UI\\\\src\\\\components\\\\Locations.js\",\n  _s = $RefreshSig$(),\n  _s3 = $RefreshSig$();\n// src/components/Locations.js\nimport { useEffect, useState } from 'react';\nimport { MapContainer, TileLayer, GeoJSON, useMap } from 'react-leaflet';\nimport L from 'leaflet';\nimport wk from 'wellknown'; // wellknown.parse(wkt) -> GeoJSON geometry\n\n// FitBounds helper: bir array GeoJSON Feature'ı alıp haritayı ona göre ayarlar\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction FitBounds({\n  features\n}) {\n  _s();\n  const map = useMap();\n  useEffect(() => {\n    if (!features || features.length === 0) return;\n\n    // create leaflet layers and compute union bounds\n    const layers = features.map(f => L.geoJSON(f));\n    const group = L.featureGroup(layers);\n    try {\n      const bounds = group.getBounds();\n      if (bounds.isValid()) {\n        map.fitBounds(bounds, {\n          padding: [20, 20]\n        });\n      }\n    } catch (e) {\n      // hata olsa da kırma\n      console.warn('FitBounds hata:', e);\n    }\n  }, [features, map]);\n  return null;\n}\n_s(FitBounds, \"IoceErwr5KVGS9kN4RQ1bOkYMAg=\", false, function () {\n  return [useMap];\n});\n_c = FitBounds;\nexport default function Locations() {\n  _s3();\n  var _s2 = $RefreshSig$();\n  const [items, setItems] = useState([]); // raw rows (id, name, extent_wkt, ...)\n  const [features, setFeatures] = useState([]); // GeoJSON Feature array\n\n  _s2(useEffect(_s2(() => {\n    _s2();\n    // fetch('/locations') // proxy ayarlıysa /locations\n    //     .then(res => res.json())\n    //     .then(data => {\n    //         // data: [{ id, name, extent_wkt, ... }, ...]\n    //         setItems(data);\n    //\n    //         // WKT -> GeoJSON Feature dönüştür\n    //         const feats = data\n    //             .map(row => {\n    //                 if (!row.extent_wkt) return null;\n    //                 const geom = wk.parse(row.extent_wkt); // returns GeoJSON geometry (or null)\n    //                 if (!geom) return null;\n    //                 return {\n    //                     type: 'Feature',\n    //                     geometry: geom,\n    //                     properties: {\n    //                         id: row.id,\n    //                         name: row.name\n    //                     }\n    //                 };\n    //             })\n    //             .filter(Boolean);\n    //\n    //         setFeatures(feats);\n    //     })\n    //     .catch(err => {\n    //         console.error('Lokasyon çekme hatası:', err);\n    //     });\n    // test data: kesin geçerli GeoJSON (Ege civarında)\n    const testFeatures = [{\n      type: 'Feature',\n      geometry: {\n        type: 'Polygon',\n        coordinates: [[[27.5, 38.0], [29.0, 38.0], [29.0, 39.0], [27.5, 39.0], [27.5, 38.0]]]\n      },\n      properties: {\n        name: 'Test Polygon'\n      }\n    }];\n\n    // useEffect yerine doğrudan set:\n    useEffect(() => {\n      setFeatures(testFeatures);\n    }, []);\n  }, \"OD7bBpZva5O2jO+Puf00hKivP7c=\"), []), \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: 'flex',\n      gap: 12\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: '35%',\n        maxHeight: '80vh',\n        overflow: 'auto'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Locations (DB)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: items.map(i => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: i.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              fontSize: 12,\n              whiteSpace: 'pre-wrap'\n            },\n            children: i.extent_wkt ? i.extent_wkt.slice(0, 200) + (i.extent_wkt.length > 200 ? '...' : '') : 'WKT yok'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 29\n          }, this)]\n        }, i.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        flex: 1,\n        height: '80vh'\n      },\n      children: /*#__PURE__*/_jsxDEV(MapContainer, {\n        center: [38.5, 28.0],\n        zoom: 7,\n        style: {\n          height: '100%',\n          width: '100%'\n        },\n        children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n          attribution: \"\\xA9 OpenStreetMap contributors\",\n          url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 21\n        }, this), features.map((f, idx) => /*#__PURE__*/_jsxDEV(GeoJSON, {\n          data: f,\n          onEachFeature: (feature, layer) => {\n            var _feature$properties$n, _feature$properties;\n            const name = (_feature$properties$n = (_feature$properties = feature.properties) === null || _feature$properties === void 0 ? void 0 : _feature$properties.name) !== null && _feature$properties$n !== void 0 ? _feature$properties$n : 'No name';\n            layer.bindPopup(`<strong>${name}</strong>`);\n          }\n        }, idx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 25\n        }, this)), /*#__PURE__*/_jsxDEV(FitBounds, {\n          features: features\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 9\n  }, this);\n}\n_s3(Locations, \"CnfuQiaDnYSGkT7qiBc3rkKFBB4=\");\n_c2 = Locations;\nvar _c, _c2;\n$RefreshReg$(_c, \"FitBounds\");\n$RefreshReg$(_c2, \"Locations\");","map":{"version":3,"names":["useEffect","useState","MapContainer","TileLayer","GeoJSON","useMap","L","wk","jsxDEV","_jsxDEV","FitBounds","features","_s","map","length","layers","f","geoJSON","group","featureGroup","bounds","getBounds","isValid","fitBounds","padding","e","console","warn","_c","Locations","_s3","_s2","$RefreshSig$","items","setItems","setFeatures","testFeatures","type","geometry","coordinates","properties","name","style","display","gap","children","width","maxHeight","overflow","fileName","_jsxFileName","lineNumber","columnNumber","i","fontSize","whiteSpace","extent_wkt","slice","id","flex","height","center","zoom","attribution","url","idx","data","onEachFeature","feature","layer","_feature$properties$n","_feature$properties","bindPopup","_c2","$RefreshReg$"],"sources":["C:/Users/mcTek/Desktop/OrmanBakanligiProje/KURAKLIK/KURAKLIK.UI/src/components/Locations.js"],"sourcesContent":["// src/components/Locations.js\r\nimport { useEffect, useState } from 'react';\r\nimport { MapContainer, TileLayer, GeoJSON, useMap } from 'react-leaflet';\r\nimport L from 'leaflet';\r\nimport wk from 'wellknown'; // wellknown.parse(wkt) -> GeoJSON geometry\r\n\r\n// FitBounds helper: bir array GeoJSON Feature'ı alıp haritayı ona göre ayarlar\r\nfunction FitBounds({ features }) {\r\n    const map = useMap();\r\n\r\n    useEffect(() => {\r\n        if (!features || features.length === 0) return;\r\n\r\n        // create leaflet layers and compute union bounds\r\n        const layers = features.map(f => L.geoJSON(f));\r\n        const group = L.featureGroup(layers);\r\n        try {\r\n            const bounds = group.getBounds();\r\n            if (bounds.isValid()) {\r\n                map.fitBounds(bounds, { padding: [20, 20] });\r\n            }\r\n        } catch (e) {\r\n            // hata olsa da kırma\r\n            console.warn('FitBounds hata:', e);\r\n        }\r\n    }, [features, map]);\r\n\r\n    return null;\r\n}\r\n\r\nexport default function Locations() {\r\n    const [items, setItems] = useState([]);       // raw rows (id, name, extent_wkt, ...)\r\n    const [features, setFeatures] = useState([]); // GeoJSON Feature array\r\n\r\n    useEffect(() => {\r\n        // fetch('/locations') // proxy ayarlıysa /locations\r\n        //     .then(res => res.json())\r\n        //     .then(data => {\r\n        //         // data: [{ id, name, extent_wkt, ... }, ...]\r\n        //         setItems(data);\r\n        //\r\n        //         // WKT -> GeoJSON Feature dönüştür\r\n        //         const feats = data\r\n        //             .map(row => {\r\n        //                 if (!row.extent_wkt) return null;\r\n        //                 const geom = wk.parse(row.extent_wkt); // returns GeoJSON geometry (or null)\r\n        //                 if (!geom) return null;\r\n        //                 return {\r\n        //                     type: 'Feature',\r\n        //                     geometry: geom,\r\n        //                     properties: {\r\n        //                         id: row.id,\r\n        //                         name: row.name\r\n        //                     }\r\n        //                 };\r\n        //             })\r\n        //             .filter(Boolean);\r\n        //\r\n        //         setFeatures(feats);\r\n        //     })\r\n        //     .catch(err => {\r\n        //         console.error('Lokasyon çekme hatası:', err);\r\n        //     });\r\n        // test data: kesin geçerli GeoJSON (Ege civarında)\r\n        const testFeatures = [{\r\n            type: 'Feature',\r\n            geometry: {\r\n                type: 'Polygon',\r\n                coordinates: [\r\n                    [\r\n                        [27.5, 38.0],\r\n                        [29.0, 38.0],\r\n                        [29.0, 39.0],\r\n                        [27.5, 39.0],\r\n                        [27.5, 38.0]\r\n                    ]\r\n                ]\r\n            },\r\n            properties: { name: 'Test Polygon' }\r\n        }];\r\n\r\n// useEffect yerine doğrudan set:\r\n        useEffect(() => {\r\n            setFeatures(testFeatures);\r\n        }, []);\r\n    }, []);\r\n\r\n    return (\r\n        <div style={{ display: 'flex', gap: 12 }}>\r\n            <div style={{ width: '35%', maxHeight: '80vh', overflow: 'auto' }}>\r\n                <h3>Locations (DB)</h3>\r\n                <ul>\r\n                    {items.map(i => (\r\n                        <li key={i.id}>\r\n                            <strong>{i.name}</strong>\r\n                            <div style={{ fontSize: 12, whiteSpace: 'pre-wrap' }}>\r\n                                {i.extent_wkt ? i.extent_wkt.slice(0, 200) + (i.extent_wkt.length > 200 ? '...' : '') : 'WKT yok'}\r\n                            </div>\r\n                        </li>\r\n                    ))}\r\n                </ul>\r\n            </div>\r\n\r\n            <div style={{ flex: 1, height: '80vh' }}>\r\n                <MapContainer center={[38.5, 28.0]} zoom={7} style={{ height: '100%', width: '100%' }}>\r\n                    <TileLayer\r\n                        attribution='&copy; OpenStreetMap contributors'\r\n                        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                    />\r\n\r\n                    {/* Her feature için GeoJSON olustur ve popup ekle */}\r\n                    {features.map((f, idx) => (\r\n                        <GeoJSON\r\n                            key={idx}\r\n                            data={f}\r\n                            onEachFeature={(feature, layer) => {\r\n                                const name = feature.properties?.name ?? 'No name';\r\n                                layer.bindPopup(`<strong>${name}</strong>`);\r\n                            }}\r\n                        />\r\n                    ))}\r\n\r\n                    <FitBounds features={features} />\r\n                </MapContainer>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}